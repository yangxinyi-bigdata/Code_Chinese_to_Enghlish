{
 "cells": [
  {
   "cell_type": "code",
   "id": "initial_id",
   "metadata": {
    "collapsed": true,
    "ExecuteTime": {
     "end_time": "2024-08-17T03:50:13.708871Z",
     "start_time": "2024-08-17T03:50:13.501533Z"
    }
   },
   "source": [
    "import re\n",
    "import os\n",
    "import json\n",
    "import datetime\n",
    "import time\n",
    "import random\n",
    "from loguru import logger as 日志\n",
    "import shutil\n",
    "import pandas as pd"
   ],
   "outputs": [],
   "execution_count": 1
  },
  {
   "metadata": {},
   "cell_type": "markdown",
   "source": [
    "写一些文本内容进行测试, \n",
    "如果是连在一起的内容会怎么样呢? \n",
    "\n",
    "如果是各行的呢?\n",
    "\n",
    "### 如果是添加了标题的呢? "
   ],
   "id": "a3c1381d5fdd7244"
  },
  {
   "metadata": {
    "ExecuteTime": {
     "end_time": "2024-08-17T03:50:13.711418Z",
     "start_time": "2024-08-17T03:50:13.710006Z"
    }
   },
   "cell_type": "code",
   "source": "",
   "id": "27e2bb4e1761e691",
   "outputs": [],
   "execution_count": 1
  },
  {
   "metadata": {
    "ExecuteTime": {
     "end_time": "2024-08-17T03:50:14.255403Z",
     "start_time": "2024-08-17T03:50:14.249667Z"
    }
   },
   "cell_type": "code",
   "source": [
    "import pandas as pd\n",
    "\n",
    "# 创建示例 DataFrame\n",
    "data = {\n",
    "    '项目': ['项目1', '项目2', '项目3'],\n",
    "    '目录': ['目录1', '目录2', '目录3'],\n",
    "    '包含中文': [1, 0, 1]\n",
    "}\n",
    "项目_目录表单 = pd.DataFrame(data)\n",
    "\n",
    "# 筛选出包含中文的行，并对其进行操作\n",
    "项目_中文目录表单 = 项目_目录表单.loc[项目_目录表单[\"包含中文\"] == 1]\n",
    "\n",
    "# 修改视图中的值\n",
    "项目_中文目录表单.loc[项目_中文目录表单[\"项目\"] == \"项目1\", \"目录\"] = \"新目录1\"\n",
    "\n",
    "项目_目录表单.update(项目_中文目录表单)\n",
    "\n",
    "# 查看原 DataFrame 的变化\n",
    "print(项目_目录表单)"
   ],
   "id": "b2d3a38ca51e018",
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "    项目    目录  包含中文\n",
      "0  项目1  新目录1     1\n",
      "1  项目2   目录2     0\n",
      "2  项目3   目录3     1\n"
     ]
    }
   ],
   "execution_count": 2
  },
  {
   "metadata": {
    "ExecuteTime": {
     "end_time": "2024-08-15T08:35:27.475833Z",
     "start_time": "2024-08-15T08:35:27.466846Z"
    }
   },
   "cell_type": "code",
   "source": [
    "创建目录 = \"/Users/yangxinyi/Downloads/200_临时文件夹/Test_Project_V1/translation_tool\"\n",
    "原目录 = \"/Users/yangxinyi/Downloads/200_临时文件夹/Test_Project_V1/翻译工具\""
   ],
   "id": "8afb950455dbbfd4",
   "execution_count": 17,
   "outputs": []
  },
  {
   "metadata": {
    "ExecuteTime": {
     "end_time": "2024-08-15T08:37:13.713951Z",
     "start_time": "2024-08-15T08:37:13.695562Z"
    }
   },
   "cell_type": "code",
   "source": [
    "# 删除非空文件夹\n",
    "shutil.rmtree(创建目录)"
   ],
   "id": "8b41666b4946a930",
   "execution_count": 20,
   "outputs": []
  },
  {
   "metadata": {
    "ExecuteTime": {
     "end_time": "2024-08-15T08:37:18.994301Z",
     "start_time": "2024-08-15T08:37:18.965463Z"
    }
   },
   "cell_type": "code",
   "source": "shutil.copytree(原目录, 创建目录)",
   "id": "7577cddd2dd3c8ce",
   "execution_count": 21,
   "outputs": []
  },
  {
   "metadata": {
    "ExecuteTime": {
     "end_time": "2024-08-15T07:18:14.112762Z",
     "start_time": "2024-08-15T07:18:14.104666Z"
    }
   },
   "cell_type": "code",
   "source": "df = pd.DataFrame(columns=[\"列\", \"列2\"])",
   "id": "dd28dc8e9deee828",
   "execution_count": 8,
   "outputs": []
  },
  {
   "metadata": {
    "ExecuteTime": {
     "end_time": "2024-08-15T07:18:14.531080Z",
     "start_time": "2024-08-15T07:18:14.524571Z"
    }
   },
   "cell_type": "code",
   "source": "df.loc[0] = {\"列\": 1, \"列2\": 2}\n",
   "id": "4042b39edcf7c443",
   "execution_count": 9,
   "outputs": []
  },
  {
   "metadata": {
    "ExecuteTime": {
     "end_time": "2024-08-15T07:25:05.829074Z",
     "start_time": "2024-08-15T07:25:05.804808Z"
    }
   },
   "cell_type": "code",
   "source": "df.loc[1] = {\"列\": 2, \"列2\": 33}",
   "id": "54aa50415695c1c9",
   "execution_count": 12,
   "outputs": []
  },
  {
   "metadata": {
    "ExecuteTime": {
     "end_time": "2024-08-15T07:17:10.354096Z",
     "start_time": "2024-08-15T07:17:10.336238Z"
    }
   },
   "cell_type": "code",
   "source": "df[0] = {\"列\": 1, \"列2\": 2}",
   "id": "7f32111f726acb26",
   "execution_count": 3,
   "outputs": []
  },
  {
   "metadata": {
    "ExecuteTime": {
     "end_time": "2024-08-15T07:25:07.330332Z",
     "start_time": "2024-08-15T07:25:07.317577Z"
    }
   },
   "cell_type": "code",
   "source": "df",
   "id": "28ecf782f7d1f3df",
   "execution_count": 13,
   "outputs": []
  },
  {
   "metadata": {
    "ExecuteTime": {
     "end_time": "2024-08-15T07:25:35.717399Z",
     "start_time": "2024-08-15T07:25:35.707843Z"
    }
   },
   "cell_type": "code",
   "source": "df[\"列2\"].to_list()",
   "id": "154b6d82e0beb59a",
   "execution_count": 16,
   "outputs": []
  },
  {
   "metadata": {
    "ExecuteTime": {
     "end_time": "2024-08-09T13:09:45.472592Z",
     "start_time": "2024-08-09T13:09:45.459807Z"
    }
   },
   "cell_type": "code",
   "source": [
    "项目_根路径 = '/Users/yangxinyi/Library/CloudStorage/OneDrive-个人/100_code/Test_Translate_Project'\n",
    "    "
   ],
   "id": "2d3fe343979f5f9e",
   "execution_count": 2,
   "outputs": []
  },
  {
   "metadata": {
    "ExecuteTime": {
     "end_time": "2024-08-09T13:24:04.138216Z",
     "start_time": "2024-08-09T13:24:04.110138Z"
    }
   },
   "cell_type": "code",
   "source": [
    "项目_中文目录映射= {'示例代码': ['/Users/yangxinyi/Library/CloudStorage/OneDrive-个人/100_code/Test_Translate_Project/示例代码', '/Users/yangxinyi/Library/CloudStorage/OneDrive-个人/100_code/Test_Translate_Project', '', ''], '处理后': ['/Users/yangxinyi/Library/CloudStorage/OneDrive-个人/100_code/Test_Translate_Project/示例代码/novel_send/处理后', '/Users/yangxinyi/Library/CloudStorage/OneDrive-个人/100_code/Test_Translate_Project/示例代码/novel_send', '', ''], '原文件': ['/Users/yangxinyi/Library/CloudStorage/OneDrive-个人/100_code/Test_Translate_Project/示例代码/novel_send/原文件', '/Users/yangxinyi/Library/CloudStorage/OneDrive-个人/100_code/Test_Translate_Project/示例代码/novel_send', '', ''], '6章合并': ['/Users/yangxinyi/Library/CloudStorage/OneDrive-个人/100_code/Test_Translate_Project/示例代码/novel_send/6章合并', '/Users/yangxinyi/Library/CloudStorage/OneDrive-个人/100_code/Test_Translate_Project/示例代码/novel_send', '', ''], '翻译工具': ['/Users/yangxinyi/Library/CloudStorage/OneDrive-个人/100_code/Test_Translate_Project/翻译工具', '/Users/yangxinyi/Library/CloudStorage/OneDrive-个人/100_code/Test_Translate_Project', '', '']}\n",
    "\n"
   ],
   "id": "99eeea871a0a1e15",
   "execution_count": 4,
   "outputs": []
  },
  {
   "metadata": {
    "ExecuteTime": {
     "end_time": "2024-08-11T09:10:01.513488Z",
     "start_time": "2024-08-11T09:10:01.467381Z"
    }
   },
   "cell_type": "code",
   "source": [
    "import os\n",
    "\n",
    "# 示例的中文-英文目录映射\n",
    "chinese_to_english = {\n",
    "    '示例代码': 'Example_Code',\n",
    "    '处理后': 'Processed',\n",
    "    '原文件': 'Original_Files',\n",
    "    '6章合并': 'Chapter_6_Merged',\n",
    "    '翻译工具': 'Translation_Tools'\n",
    "}\n",
    "\n",
    "# 项目中的中文目录映射\n",
    "project_chinese_dirs = {\n",
    "    '示例代码': ['/Users/yangxinyi/Library/CloudStorage/OneDrive-个人/100_code/Test_Translate_Project/示例代码', '/Users/yangxinyi/Library/CloudStorage/OneDrive-个人/100_code/Test_Translate_Project'],\n",
    "    '处理后': ['/Users/yangxinyi/Library/CloudStorage/OneDrive-个人/100_code/Test_Translate_Project/示例代码/novel_send/处理后', '/Users/yangxinyi/Library/CloudStorage/OneDrive-个人/100_code/Test_Translate_Project/示例代码/novel_send'],\n",
    "    '原文件': ['/Users/yangxinyi/Library/CloudStorage/OneDrive-个人/100_code/Test_Translate_Project/示例代码/novel_send/原文件', '/Users/yangxinyi/Library/CloudStorage/OneDrive-个人/100_code/Test_Translate_Project/示例代码/novel_send'],\n",
    "    '6章合并': ['/Users/yangxinyi/Library/CloudStorage/OneDrive-个人/100_code/Test_Translate_Project/示例代码/novel_send/6章合并', '/Users/yangxinyi/Library/CloudStorage/OneDrive-个人/100_code/Test_Translate_Project/示例代码/novel_send'],\n",
    "    '翻译工具': ['/Users/yangxinyi/Library/CloudStorage/OneDrive-个人/100_code/Test_Translate_Project/翻译工具', '/Users/yangxinyi/Library/CloudStorage/OneDrive-个人/100_code/Test_Translate_Project']\n",
    "}"
   ],
   "id": "946f5c591b1133b1",
   "execution_count": 5,
   "outputs": []
  },
  {
   "metadata": {
    "ExecuteTime": {
     "end_time": "2024-08-11T09:19:24.544100Z",
     "start_time": "2024-08-11T09:18:12.323060Z"
    }
   },
   "cell_type": "code",
   "source": [
    "for chinese_dir, paths in project_chinese_dirs.items():\n",
    "    original_path = paths[0]\n",
    "    parent_path = paths[1]\n",
    "    \n",
    "    # 获取对应的英文目录名\n",
    "    english_dir_name = chinese_to_english[chinese_dir]\n",
    "    # print(original_path)\n",
    "    # print(parent_path)\n",
    "    # print(english_dir_name)\n",
    "    # print(\"_________\")\n",
    "    # \n",
    "    # 检查父目录是否包含中文，并确定英文父目录的路径\n",
    "    parent_dirs = parent_path.split(os.sep)\n",
    "    print(parent_path)\n",
    "    print(parent_dirs)\n",
    "    print(\"_________\")\n",
    "    \n",
    "    new_parent_path = \"\"\n",
    "    for part in parent_dirs:\n",
    "        if part in chinese_to_english:\n",
    "            new_parent_path = os.path.join(new_parent_path, chinese_to_english[part])\n",
    "        else:\n",
    "            new_parent_path = os.path.join(new_parent_path, part)\n",
    "            \n",
    "    # 构造新的英文目录路径\n",
    "    english_dir_path = os.path.join(new_parent_path, english_dir_name)\n",
    "    \n",
    "    print(english_dir_path)\n",
    "    \n",
    "    print(\"_________\")"
   ],
   "id": "f7576cf3b792b32d",
   "execution_count": 15,
   "outputs": []
  },
  {
   "metadata": {
    "ExecuteTime": {
     "end_time": "2024-08-11T09:19:51.550465Z",
     "start_time": "2024-08-11T09:19:51.539176Z"
    }
   },
   "cell_type": "code",
   "source": "t = \"/Users/yangxinyi/Library/CloudStorage/OneDrive-个人/100_code/Test_Translate_Project\"",
   "id": "df66bbd2935d0aed",
   "execution_count": 16,
   "outputs": []
  },
  {
   "metadata": {
    "ExecuteTime": {
     "end_time": "2024-08-11T09:20:14.493592Z",
     "start_time": "2024-08-11T09:20:14.477052Z"
    }
   },
   "cell_type": "code",
   "source": "t.split(os.sep)",
   "id": "14e0fc3d080b42b1",
   "execution_count": 17,
   "outputs": []
  },
  {
   "metadata": {},
   "cell_type": "code",
   "execution_count": null,
   "source": "new_parent_path = \"\"",
   "id": "3fe4f6096d7b4f84",
   "outputs": []
  },
  {
   "metadata": {
    "ExecuteTime": {
     "end_time": "2024-08-11T09:21:58.652931Z",
     "start_time": "2024-08-11T09:21:58.639486Z"
    }
   },
   "cell_type": "code",
   "source": "os.path.join(new_parent_path, \"Example_Code\")",
   "id": "4399065924b9d6a7",
   "execution_count": 19,
   "outputs": []
  },
  {
   "metadata": {
    "ExecuteTime": {
     "end_time": "2024-08-11T09:46:19.432456Z",
     "start_time": "2024-08-11T09:32:01.596561Z"
    }
   },
   "cell_type": "code",
   "source": [
    "import os\n",
    "\n",
    "# 示例的中文-英文目录映射\n",
    "chinese_to_english = {\n",
    "    '示例代码': 'Example_Code',\n",
    "    '处理后': 'Processed',\n",
    "    '原文件': 'Original_Files',\n",
    "    '6章合并': 'Chapter_6_Merged',\n",
    "    '翻译工具': 'Translation_Tools'\n",
    "}\n",
    "\n",
    "# 项目中的中文目录映射\n",
    "project_chinese_dirs = {\n",
    "    '示例代码': ['/Users/yangxinyi/Library/CloudStorage/OneDrive-个人/100_code/Test_Translate_Project/示例代码', '/Users/yangxinyi/Library/CloudStorage/OneDrive-个人/100_code/Test_Translate_Project'],\n",
    "    '处理后': ['/Users/yangxinyi/Library/CloudStorage/OneDrive-个人/100_code/Test_Translate_Project/示例代码/novel_send/处理后', '/Users/yangxinyi/Library/CloudStorage/OneDrive-个人/100_code/Test_Translate_Project/示例代码/novel_send'],\n",
    "    '原文件': ['/Users/yangxinyi/Library/CloudStorage/OneDrive-个人/100_code/Test_Translate_Project/示例代码/novel_send/原文件', '/Users/yangxinyi/Library/CloudStorage/OneDrive-个人/100_code/Test_Translate_Project/示例代码/novel_send'],\n",
    "    '6章合并': ['/Users/yangxinyi/Library/CloudStorage/OneDrive-个人/100_code/Test_Translate_Project/示例代码/novel_send/6章合并', '/Users/yangxinyi/Library/CloudStorage/OneDrive-个人/100_code/Test_Translate_Project/示例代码/novel_send'],\n",
    "    '翻译工具': ['/Users/yangxinyi/Library/CloudStorage/OneDrive-个人/100_code/Test_Translate_Project/翻译工具', '/Users/yangxinyi/Library/CloudStorage/OneDrive-个人/100_code/Test_Translate_Project']\n",
    "}\n",
    "\n",
    "# 项目的根目录\n",
    "root_directory = \"/Users/yangxinyi/Library/CloudStorage/OneDrive-个人/100_code/Test_Translate_Project\"\n",
    "\n",
    "def create_english_directories(chinese_to_english, project_chinese_dirs, root_directory):\n",
    "    for chinese_dir, paths in project_chinese_dirs.items():\n",
    "        original_path = paths[0]\n",
    "        parent_path = paths[1]\n",
    "\n",
    "        # 如果是根目录中的中文目录，跳过翻译\n",
    "        if parent_path == root_directory:\n",
    "            continue\n",
    "        \n",
    "        # 获取对应的英文目录名\n",
    "        english_dir_name = chinese_to_english[chinese_dir]\n",
    "        \n",
    "        # 检查父目录是否包含中文，并确定英文父目录的路径\n",
    "        parent_dirs = parent_path.split(os.sep)\n",
    "        new_parent_path = root_directory  # 从根目录开始构建路径\n",
    "        \n",
    "        for part in parent_dirs[len(root_directory.split(os.sep)):]:\n",
    "            if part in chinese_to_english:\n",
    "                new_parent_path = os.path.join(new_parent_path, chinese_to_english[part])\n",
    "            else:\n",
    "                new_parent_path = os.path.join(new_parent_path, part)\n",
    "        \n",
    "        # 构造新的英文目录路径\n",
    "        english_dir_path = os.path.join(new_parent_path, english_dir_name)\n",
    "        \n",
    "        # 创建对应的英文目录\n",
    "        if not os.path.exists():\n",
    "            os.makedirs(english_dir_path)\n",
    "            print(f\"Created directory: {english_dir_path}\")\n",
    "        else:\n",
    "            print(f\"Directory already exists: {english_dir_path}\")\n",
    "\n",
    "# 执行目录创建\n",
    "create_english_directories(chinese_to_english, project_chinese_dirs, root_directory)"
   ],
   "id": "ca31c2705fbd6562",
   "execution_count": 29,
   "outputs": []
  },
  {
   "metadata": {
    "ExecuteTime": {
     "end_time": "2024-08-11T11:02:47.955141Z",
     "start_time": "2024-08-11T11:02:47.939179Z"
    }
   },
   "cell_type": "code",
   "source": [
    "# 获取当前文件的绝对路径\n",
    "current_file_path = os.path.abspath(\"/Users/yangxinyi/Library/CloudStorage/OneDrive-个人/100_code/Code_Chinese_to_Enghlish/中文变量翻译.py\")\n",
    "# 获取当前文件所在的目录\n",
    "current_directory = os.path.dirname(current_file_path)\n",
    "# 改变工作目录到当前文件所在的目录\n",
    "os.chdir(current_directory)\n",
    "日志.info(\"工作目录已改变为: {}\", os.getcwd())"
   ],
   "id": "35eea4258d15aa33",
   "execution_count": 56,
   "outputs": []
  },
  {
   "metadata": {
    "ExecuteTime": {
     "end_time": "2024-08-11T11:02:49.777221Z",
     "start_time": "2024-08-11T11:02:49.771344Z"
    }
   },
   "cell_type": "code",
   "source": "from 项目翻译 import *",
   "id": "86857cd77b13d180",
   "execution_count": 57,
   "outputs": []
  },
  {
   "metadata": {
    "ExecuteTime": {
     "end_time": "2024-08-11T11:14:03.070028Z",
     "start_time": "2024-08-11T11:14:03.052480Z"
    }
   },
   "cell_type": "code",
   "source": [
    "项目_根路径 = '/Users/yangxinyi/Downloads/Test_Translate_Project'\n",
    "收集_目录列表, 收集_文件列表 = 遍历目录和文件列表(项目_根路径)"
   ],
   "id": "c4674478e91fc8e7",
   "execution_count": 64,
   "outputs": []
  },
  {
   "metadata": {
    "ExecuteTime": {
     "end_time": "2024-08-11T11:14:03.418768Z",
     "start_time": "2024-08-11T11:14:03.394350Z"
    }
   },
   "cell_type": "code",
   "source": "收集_目录列表",
   "id": "5c7ff40a4af5de20",
   "execution_count": 65,
   "outputs": []
  },
  {
   "metadata": {
    "ExecuteTime": {
     "end_time": "2024-08-11T11:14:05.629896Z",
     "start_time": "2024-08-11T11:14:05.622123Z"
    }
   },
   "cell_type": "code",
   "source": "收集_相对目录列表 = [元素.replace(项目_根路径, \"\") for 元素 in 收集_目录列表]",
   "id": "75e8867ffee88f2",
   "execution_count": 66,
   "outputs": []
  },
  {
   "metadata": {
    "ExecuteTime": {
     "end_time": "2024-08-11T11:14:05.967341Z",
     "start_time": "2024-08-11T11:14:05.959215Z"
    }
   },
   "cell_type": "code",
   "source": "收集_相对目录列表",
   "id": "746980cc2db46443",
   "execution_count": 67,
   "outputs": []
  },
  {
   "metadata": {
    "ExecuteTime": {
     "end_time": "2024-08-11T11:14:49.637231Z",
     "start_time": "2024-08-11T11:14:49.623084Z"
    }
   },
   "cell_type": "code",
   "source": [
    "项目_目录映射 = {}\n",
    "项目_中文目录映射 = {}\n",
    "for 完整路径 in 收集_相对目录列表:\n",
    "    if 完整路径:\n",
    "        上层目录名称, 文件夹名称 = 完整路径.rsplit(\"/\", maxsplit=1)\n",
    "        项目_目录映射[文件夹名称] = [\"\", 完整路径, \"\", 上层目录名称, \"\", 0]\n",
    "        if 判断中文变量(文件夹名称):  # 过滤带有中文的目录\n",
    "            项目_中文目录映射[文件夹名称] = [\"\", 完整路径, \"\", 上层目录名称, \"\", 0]\n",
    "            \n",
    "\n",
    "合并后变量 = 查询并合并变量(项目_中文目录映射.keys())\n",
    "项目_中文目录映射"
   ],
   "id": "b84f55a797b3557b",
   "execution_count": 70,
   "outputs": []
  },
  {
   "metadata": {
    "ExecuteTime": {
     "end_time": "2024-08-11T11:15:11.152752Z",
     "start_time": "2024-08-11T11:15:11.125868Z"
    }
   },
   "cell_type": "code",
   "source": [
    "项目_中文目录映射\n",
    "# 0 对应 英文变量\n",
    "# 1 对应 完整路径\n",
    "# 2 对应 完整路径 翻译成英文\n",
    "# 3 对应上层路径\n",
    "# 4 对应上层路径翻译成英文\n",
    "# 5 0, 1, 对应上级是否进行过修改, 如果修改则不用保留中文对应文件夹, 如果没有修改过, 则应该保留"
   ],
   "id": "976d5a2cd68e1ea6",
   "execution_count": 71,
   "outputs": []
  },
  {
   "metadata": {
    "ExecuteTime": {
     "end_time": "2024-08-11T11:15:18.230412Z",
     "start_time": "2024-08-11T11:15:18.204539Z"
    }
   },
   "cell_type": "code",
   "source": [
    "for 文件夹名称 in 项目_中文目录映射:\n",
    "    项目_中文目录映射[文件夹名称][0] = 合并后变量[文件夹名称]\n",
    "    if not 项目_中文目录映射[文件夹名称][5]:  # 这个文件夹还没有被替换过路径, 就是原生路径\n",
    "        # 直接创建该文件夹, \n",
    "        上级英文目录 = 项目_中文目录映射[文件夹名称][3]\n",
    "        创建目录 = 项目_根路径 + \"/\" + 上级英文目录 + \"/\" + 项目_中文目录映射[文件夹名称][0]\n",
    "        原目录 =  项目_根路径 + \"/\" + 上级英文目录 + \"/\" + 文件夹名称\n",
    "        项目_中文目录映射[文件夹名称][2] = 项目_中文目录映射[文件夹名称][1].replace(文件夹名称, 合并后变量[文件夹名称])\n",
    "        if not os.path.exists(创建目录):\n",
    "            shutil.copytree(原目录, 创建目录)\n",
    "        for 目录 in 项目_中文目录映射:  # \n",
    "            if 项目_中文目录映射[目录][1] != 项目_中文目录映射[文件夹名称][1]:\n",
    "                if 项目_中文目录映射[目录][3].find(项目_中文目录映射[文件夹名称][1]) > -1:\n",
    "                    # 上层目录修改过, 标记一下\n",
    "                    项目_中文目录映射[目录][5] = 1\n",
    "                    项目_中文目录映射[目录][4] = 项目_中文目录映射[目录][3].replace(项目_中文目录映射[文件夹名称][1], 项目_中文目录映射[文件夹名称][2])\n",
    "        # 将原文件夹中的所有内容复制过来\n",
    "    else:  # 说明不是第一层文件夹\n",
    "        # 走到这里说明父路径已经被替换过了, 这不是原生文件夹, 可以直接改名\n",
    "        上级英文目录 = 项目_中文目录映射[文件夹名称][4]\n",
    "        创建目录 = 项目_根路径 + 上级英文目录 + \"/\" + 项目_中文目录映射[文件夹名称][0]\n",
    "        原目录 =  项目_根路径 + 上级英文目录 + \"/\" + 文件夹名称\n",
    "        if not os.path.exists(创建目录):\n",
    "            os.rename(原目录, 创建目录)\n",
    "        # else:  # 如果第一层级文件夹本来就是英文, 则到这里它的父文件夹还没变过, 那么需要保留\n",
    "    \n",
    "        \n",
    "        \n",
    "项目_中文目录映射"
   ],
   "id": "fbf14fb049d421ad",
   "execution_count": 72,
   "outputs": []
  },
  {
   "metadata": {},
   "cell_type": "markdown",
   "source": [
    "首先从父层级一层一个往下面改, 这样可以保证, 每一层级, 当前层级处理完成之后, 当前层级就全是英文了, \n",
    "然后所有文件已经复制了一份到英文文件夹当中.\n",
    "后面就处理这个子文件夹就可以了, \n",
    "\n",
    "子文件夹再判断其中的目录名是否存在中文, 如果存在中文的, 则在同一层级, 创建一个英文目录, 然后将中文目录中的所有内容复制过去.\n",
    "\n",
    "然后如果这个上一层级已经有过复制了, 那么就将中文目录直接删除掉.\n",
    "如果这个上层目录没有过复制记录, 那么就保留中文的目录.\n"
   ],
   "id": "97a317a387545032"
  },
  {
   "metadata": {
    "ExecuteTime": {
     "end_time": "2024-08-14T09:42:42.612440Z",
     "start_time": "2024-08-14T09:42:42.596733Z"
    }
   },
   "cell_type": "code",
   "source": [
    "哈哈 = \"没错 \\\n",
    "这是可以换行的\""
   ],
   "id": "e96fcf2afc9397ff",
   "execution_count": 123,
   "outputs": []
  },
  {
   "metadata": {
    "ExecuteTime": {
     "end_time": "2024-08-14T09:43:02.260705Z",
     "start_time": "2024-08-14T09:43:02.252327Z"
    }
   },
   "cell_type": "code",
   "source": [
    "# 示例代码\n",
    "code_text = '''\n",
    "kkk = \"++++\"\n",
    "测试 = \"666\"\n",
    "哈哈 = \"没错 \\\n",
    "这是可以换行的\"\n",
    "print(测试)\n",
    "a = '测试 = \"666\"'\n",
    "b = \"测试 = '666'\"\n",
    "c = \"\"\"这是一个多行字符串，\n",
    "里面包含 哈哈 = 777 变量\"\"\"\n",
    "'''"
   ],
   "id": "f8ccb4d3780aeb1d",
   "execution_count": 124,
   "outputs": []
  },
  {
   "metadata": {
    "ExecuteTime": {
     "end_time": "2024-08-14T09:43:04.037716Z",
     "start_time": "2024-08-14T09:43:04.031313Z"
    }
   },
   "cell_type": "code",
   "source": [
    "# 替换映射\n",
    "variable_map = {\n",
    "    'kkk': 'fff', \n",
    "    '测试': 'test', \n",
    "    '哈哈': \"haha\"\n",
    "}"
   ],
   "id": "71c82647823777bf",
   "execution_count": 125,
   "outputs": []
  },
  {
   "metadata": {
    "ExecuteTime": {
     "end_time": "2024-08-14T09:43:04.359462Z",
     "start_time": "2024-08-14T09:43:04.349802Z"
    }
   },
   "cell_type": "code",
   "source": [
    "# 识别所有的字符串部分 (包括单引号和双引号, 以及单行和多行字符串)\n",
    "string_pattern = r'(\\\"\\\"\\\".*?\\\"\\\"\\\"|\\'\\'\\'.*?\\'\\'\\'|\\\".*?\\\"|\\'.*?\\')'\n",
    "\n",
    "# 修改为跨行匹配模式\n",
    "multi_line_string_pattern = r'(\\\"\\\"\\\".*?\\\"\\\"\\\"|\\'\\'\\'.*?\\'\\'\\')'"
   ],
   "id": "1bef1741e4f3b941",
   "execution_count": 126,
   "outputs": []
  },
  {
   "metadata": {
    "ExecuteTime": {
     "end_time": "2024-08-14T09:43:10.652985Z",
     "start_time": "2024-08-14T09:43:10.639464Z"
    }
   },
   "cell_type": "code",
   "source": "re.findall(string_pattern, code_text, flags=re.DOTALL)",
   "id": "9470fcce33e485ce",
   "execution_count": 128,
   "outputs": []
  },
  {
   "metadata": {
    "ExecuteTime": {
     "end_time": "2024-08-14T09:41:01.849647Z",
     "start_time": "2024-08-14T09:41:01.835384Z"
    }
   },
   "cell_type": "code",
   "source": [
    "# 用于替换的回调函数\n",
    "def replacer(match):\n",
    "    matched_text = match.group(0)\n",
    "    print(matched_text)\n",
    "    print(\"------\")\n",
    "    if matched_text.startswith(('\"', \"'\")):\n",
    "        # 如果是字符串（包括多行字符串），直接返回不做替换\n",
    "        return matched_text\n",
    "    else:\n",
    "        # 如果是变量名，根据映射进行替换\n",
    "        return variable_map.get(matched_text, matched_text)"
   ],
   "id": "d68923cc8a490b35",
   "execution_count": 116,
   "outputs": []
  },
  {
   "metadata": {
    "ExecuteTime": {
     "end_time": "2024-08-14T09:41:01.985703Z",
     "start_time": "2024-08-14T09:41:01.978476Z"
    }
   },
   "cell_type": "code",
   "source": [
    "# 构造变量名的正则表达式 (注意这里使用了 \\b 进行词边界匹配)\n",
    "variable_pattern = r'\\b(' + '|'.join(re.escape(var) for var in variable_map.keys()) + r')\\b'"
   ],
   "id": "d32327b640557041",
   "execution_count": 117,
   "outputs": []
  },
  {
   "metadata": {
    "ExecuteTime": {
     "end_time": "2024-08-14T09:41:02.280018Z",
     "start_time": "2024-08-14T09:41:02.269986Z"
    }
   },
   "cell_type": "code",
   "source": "variable_pattern",
   "id": "f2119babac377467",
   "execution_count": 118,
   "outputs": []
  },
  {
   "metadata": {
    "ExecuteTime": {
     "end_time": "2024-08-14T09:41:02.537170Z",
     "start_time": "2024-08-14T09:41:02.525986Z"
    }
   },
   "cell_type": "code",
   "source": [
    "# 合并字符串匹配模式和变量匹配模式\n",
    "combined_pattern = multi_line_string_pattern + r'|' + string_pattern + r'|' + variable_pattern\n",
    "combined_pattern"
   ],
   "id": "937c0ab24f050e6",
   "execution_count": 119,
   "outputs": []
  },
  {
   "metadata": {
    "ExecuteTime": {
     "end_time": "2024-08-14T09:41:03.145791Z",
     "start_time": "2024-08-14T09:41:03.132409Z"
    }
   },
   "cell_type": "code",
   "source": [
    "# 使用 sub 函数进行替换，结合字符串的保护\n",
    "code_text = re.sub(combined_pattern, replacer, code_text, flags=re.DOTALL)\n",
    "print(code_text)"
   ],
   "id": "6df6ef237cea68e4",
   "execution_count": 120,
   "outputs": []
  },
  {
   "metadata": {
    "ExecuteTime": {
     "end_time": "2024-08-14T09:12:35.752513Z",
     "start_time": "2024-08-14T09:12:35.719804Z"
    }
   },
   "cell_type": "code",
   "source": [
    "\n",
    "\n",
    "def replace_variables(code_text, variable_map):\n",
    "    # 识别所有的字符串部分 (包括单引号和双引号, 以及单行和多行字符串)\n",
    "    string_pattern = r'(\\\"\\\"\\\".*?\\\"\\\"\\\"|\\'\\'\\'.*?\\'\\'\\'|\\\".*?\\\"|\\'.*?\\')'\n",
    "    \n",
    "    # 修改为跨行匹配模式\n",
    "    multi_line_string_pattern = r'(\\\"\\\"\\\".*?\\\"\\\"\\\"|\\'\\'\\'.*?\\'\\'\\')'\n",
    "    \n",
    "    # 用于替换的回调函数\n",
    "    def replacer(match):\n",
    "        matched_text = match.group(0)\n",
    "        if matched_text.startswith(('\"', \"'\")):\n",
    "            # 如果是字符串（包括多行字符串），直接返回不做替换\n",
    "            return matched_text\n",
    "        else:\n",
    "            # 如果是变量名，根据映射进行替换\n",
    "            return variable_map.get(matched_text, matched_text)\n",
    "    \n",
    "    # 构造变量名的正则表达式 (注意这里使用了 \\b 进行词边界匹配)\n",
    "    variable_pattern = r'\\b(' + '|'.join(re.escape(var) for var in variable_map.keys()) + r')\\b'\n",
    "    \n",
    "    # 合并字符串匹配模式和变量匹配模式\n",
    "    combined_pattern = multi_line_string_pattern + r'|' + string_pattern + r'|' + variable_pattern\n",
    "    \n",
    "    # 使用 sub 函数进行替换，结合字符串的保护\n",
    "    code_text = re.sub(combined_pattern, replacer, code_text, flags=re.DOTALL)\n",
    "    \n",
    "    return code_text\n",
    "\n",
    "# 示例代码\n",
    "code_text = '''\n",
    "测试 = \"666\"\n",
    "print(测试)\n",
    "a = '测试 = \"666\"'\n",
    "b = \"测试 = '666'\"\n",
    "c = \"\"\"这是一个多行字符串，里面包含 测试 变量\"\"\"\n",
    "'''\n",
    "\n",
    "# 替换映射\n",
    "variable_map = {\n",
    "    '测试': 'test'\n",
    "}\n",
    "\n",
    "# 进行替换\n",
    "new_code_text = replace_variables(code_text, variable_map)\n",
    "\n",
    "# 输出结果\n",
    "print(new_code_text)"
   ],
   "id": "fb28572a5ff4be41",
   "execution_count": 74,
   "outputs": []
  },
  {
   "metadata": {
    "ExecuteTime": {
     "end_time": "2024-08-14T13:19:15.954236Z",
     "start_time": "2024-08-14T13:19:15.938573Z"
    }
   },
   "cell_type": "code",
   "source": [
    "import re\n",
    "\n",
    "# 测试字符串包含中文字符\n",
    "test_string = '你好世界'\n",
    "\n",
    "# 使用 \\w 进行匹配\n",
    "matches = re.findall(r'\\w', test_string)\n",
    "\n",
    "# 输出匹配结果\n",
    "print(matches)  # 输出 ['你', '好', '世', '界']"
   ],
   "id": "d8c8a2dae8f41bbd",
   "execution_count": 177,
   "outputs": []
  },
  {
   "metadata": {
    "ExecuteTime": {
     "end_time": "2024-08-14T13:20:30.419884Z",
     "start_time": "2024-08-14T13:20:30.404238Z"
    }
   },
   "cell_type": "code",
   "source": [
    "with open(\"项目翻译.py\", \"r\") as 文件:\n",
    "    代码文本 = 文件.read()"
   ],
   "id": "df0045666a4d4f7a",
   "execution_count": 178,
   "outputs": []
  },
  {
   "metadata": {
    "ExecuteTime": {
     "end_time": "2024-08-15T12:20:12.902486Z",
     "start_time": "2024-08-15T12:20:12.887596Z"
    }
   },
   "cell_type": "code",
   "source": [
    "代码文本 = \"\"\"from .数据类型 import *\n",
    "from .内置函数 import *\"\"\""
   ],
   "id": "75991b276b374f5c",
   "execution_count": 27,
   "outputs": []
  },
  {
   "metadata": {
    "ExecuteTime": {
     "end_time": "2024-08-15T12:20:15.197619Z",
     "start_time": "2024-08-15T12:20:15.188079Z"
    }
   },
   "cell_type": "code",
   "source": [
    "# 匹配注释部分\n",
    "注释匹配模式 = r'(#.*?)\\n'\n",
    "字符串匹配模式 = r'(\\\"\\\"\\\".*?\\\"\\\"\\\"|\\'\\'\\'.*?\\'\\'\\'|\\\".*?\\\"|\\'.*?\\')'\n",
    "# 修改为跨行匹配模式\n",
    "多行字符串匹配模式 = r'(\\\"\\\"\\\".*?\\\"\\\"\\\"|\\'\\'\\'.*?\\'\\'\\')'\n",
    "变量匹配模式 = r'\\b(\\w*[\\u4e00-\\u9fff]+\\w*)\\b'"
   ],
   "id": "83904a7cfa0cdcde",
   "execution_count": 28,
   "outputs": []
  },
  {
   "metadata": {
    "ExecuteTime": {
     "end_time": "2024-08-15T12:20:15.466036Z",
     "start_time": "2024-08-15T12:20:15.453388Z"
    }
   },
   "cell_type": "code",
   "source": [
    "# 合并所有模式\n",
    "综合匹配模式 = 注释匹配模式 + r'|' + 多行字符串匹配模式 + r'|' + 字符串匹配模式 + r'|' + 变量匹配模式"
   ],
   "id": "7397ca92638fa571",
   "execution_count": 29,
   "outputs": []
  },
  {
   "metadata": {
    "ExecuteTime": {
     "end_time": "2024-08-15T12:20:16.091122Z",
     "start_time": "2024-08-15T12:20:16.077604Z"
    }
   },
   "cell_type": "code",
   "source": "re.findall(综合匹配模式, 代码文本, flags=re.DOTALL)",
   "id": "a31e3d09670da4a5",
   "execution_count": 30,
   "outputs": []
  },
  {
   "metadata": {
    "ExecuteTime": {
     "end_time": "2024-08-14T12:50:46.951406Z",
     "start_time": "2024-08-14T12:50:46.938839Z"
    }
   },
   "cell_type": "code",
   "source": [
    "def 函数_替换代码变量(代码文本, 变量映射):\n",
    "    # 识别所有的字符串部分 (包括单引号和双引号, 以及单行和多行字符串)\n",
    "    字符串匹配模式 = r'(\\\"\\\"\\\".*?\\\"\\\"\\\"|\\'\\'\\'.*?\\'\\'\\'|\\\".*?\\\"|\\'.*?\\')'\n",
    "\n",
    "    # 修改为跨行匹配模式\n",
    "    多行字符串匹配模式 = r'(\\\"\\\"\\\".*?\\\"\\\"\\\"|\\'\\'\\'.*?\\'\\'\\')'\n",
    "\n",
    "    # 用于替换的回调函数\n",
    "    def 替换函数(匹配结果):\n",
    "        匹配文本 = 匹配结果.group(0)\n",
    "        if 匹配文本.startswith(('\"', \"'\")):\n",
    "            # 如果是字符串（包括多行字符串），直接返回不做替换\n",
    "            return 匹配文本\n",
    "        else:\n",
    "            # 如果是变量名，根据映射进行替换\n",
    "            return 变量映射.get(匹配文本, 匹配文本)\n",
    "\n",
    "    # 构造变量名的正则表达式 (注意这里使用了 \\b 进行词边界匹配)\n",
    "    变量匹配模式 = r'\\b(' + '|'.join(re.escape(中文变量) for 中文变量 in 变量映射.keys()) + r')\\b'\n",
    "\n",
    "    # 合并字符串匹配模式和变量匹配模式\n",
    "    综合匹配模式 = 多行字符串匹配模式 + r'|' + 字符串匹配模式 + r'|' + 变量匹配模式\n",
    "\n",
    "    # 使用 sub 函数进行替换，结合字符串的保护\n",
    "    代码文本 = re.sub(综合匹配模式, 替换函数, 代码文本, flags=re.DOTALL)\n",
    "\n",
    "    return 代码文本"
   ],
   "id": "bda6b5f0a6f68148",
   "execution_count": 134,
   "outputs": []
  },
  {
   "metadata": {
    "ExecuteTime": {
     "end_time": "2024-08-14T12:50:54.131808Z",
     "start_time": "2024-08-14T12:50:54.116905Z"
    }
   },
   "cell_type": "code",
   "source": [
    "import re\n",
    "\n",
    "def find_chinese_variables(code_text):\n",
    "    # 正则表达式：匹配包含中文字符的变量名\n",
    "    pattern = r'\\b\\w*[\\u4e00-\\u9fff]+\\w*\\b'\n",
    "    \n",
    "    # 使用 findall 来获取所有匹配的变量名\n",
    "    chinese_variables = re.findall(pattern, code_text)\n",
    "    \n",
    "    return chinese_variables\n",
    "\n",
    "# 示例代码\n",
    "code_text = '''\n",
    "directory_mapping_dict = tongyi_qianwen_model.翻译文件名(chinese_variable)\n",
    "directory_mapping_dict = tongyi_qianwen_model.翻译文件名Test(chinese_variable)\n",
    "directory_mapping_dict = tongyi_qianwen_model.翻译文件名_Test_OK(chinese_variable)\n",
    "directory_mapping_dict = tongyi_qianwen_model.have_a_fun(chinese_variable)\n",
    "\n",
    "'''\n",
    "\n",
    "\n",
    "\n",
    "# 查找包含中文的变量名\n",
    "chinese_variables = find_chinese_variables(内容)\n",
    "\n",
    "# 输出结果\n",
    "print(chinese_variables)"
   ],
   "id": "9a7bde4ffe53a602",
   "execution_count": 135,
   "outputs": []
  },
  {
   "metadata": {},
   "cell_type": "code",
   "execution_count": null,
   "source": "",
   "id": "76a633a485211a44",
   "outputs": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "code_chinese_to_english",
   "language": "python",
   "name": "code_chinese_to_english"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 2
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython2",
   "version": "2.7.6"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
